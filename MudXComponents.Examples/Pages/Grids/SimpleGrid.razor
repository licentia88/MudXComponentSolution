@page "/Grids/SImpleGrid"

@inherits MudGridX<USERS>

@code{}

<MudGridX 
        SmartCrud="true"
        EnableModelValidation="true"
        EnableSearch="true"
        EnablePagination="true"
        OnCreate="@CreateCommand"
        OnDelete="@DeleteCommand"
        OnUpdate="@UpdateCommand"
        OnLoad="@OnLoad"
        TModel="USERS"
        DataSource="@DataSource"
        Title="Im Just a simple grid">
 
    <HeaderButtons >
        <GridFabButton Title="Yeni Kullanici"
                       ViewState="ViewState.Create"
                       Color="Color.Tertiary"
                       PageSize="MaxWidth.Medium"
                       StartIcon="@Icons.Filled.Add"
                       TModel="USERS"/>


        <GridFabButton 
            OnClick="() =>  CustomCommand()"
            Color="Color.Tertiary" Style="margin-left:5px"
                       StartIcon="@Icons.Custom.FileFormats.FileMusic"
                       TModel="DummyModel" />
 
    </HeaderButtons>

    <GridColumns>
        <GridColumn BindingType="int"
                    Order="1"
                    xs="12" sm="12" md="12" lg="12" xl="12" xxl="12"
                    TModel="USERS"
                    BindingField="@(nameof(USERS.U_ROWID))"
                    Label="rowid" />

        <GridColumn BindingType="string" Class="mt-5"
                    Order="2"
                    xs="12" sm="12" md="12" lg="5" xl="5" xxl="5"
                    TModel="USERS"
                    BindingField="@(nameof(USERS.U_NAME))"
                    Label="Name" />

        <GridSpacer TModel="USERS"
                    Order="3"
                    xs="12" sm="12" md="2" lg="2" xl="2" xxl="2" />

        <GridColumn BindingType="string" Class="mt-5"
                    Order="4"
                    xs="12" sm="12" md="12" lg="5" xl="5" xxl="5"
                    TModel="USERS" BindingField="@(nameof(USERS.U_SURNAME))" Label="Surname" />

        <GridSelect Class="mt-5"
                    Order="5"
                    xs="12" sm="12" md="12" lg="5" xl="5" xxl="5"
                    TModel="USERS"
                    TSourceModel="COUNTRIES"
                    DataSource="@countries.Value"
                    Dense="true"
                    Placeholder="Seciniz"
                    BindingField="@(nameof(USERS.U_COUNTRY_CODE))"
                    TextField="@(nameof(COUNTRIES.C_DESC))"
                    ValueField="@(nameof(COUNTRIES.C_CODE))"
                    Label="Country" />
        <GridSpacer TModel="USERS"
                    Order="3"
                    xs="12" sm="12" md="12" lg="2" xl="2" xxl="2" />

        <GridSelect Class="mt-5"
                    Order="6"
                    xs="12" sm="12" md="12" lg="5" xl="5" xxl="5"
                    TModel="USERS"
                    TSourceModel="CITIES"
                    DataSource="@Cities.Value"
                    Dense="true"
                    Placeholder="Seciniz"
                    BindingField="@(nameof(USERS.U_CITY_CODE))"
                    TextField="@(nameof(CITIES.CIT_DESC))"
                    ValueField="@(nameof(CITIES.CIT_CODE))"
                    Label="City" />




        <GridColumn BindingType="string"
                    Order="7"
                    xs="12" sm="12" md="12" lg="12" xl="12" xxl="12"
                    Lines="3"
                    TModel="USERS" BindingField="@(nameof(USERS.U_DESCRIPTION))" Label="Description" />

        <GridCheckBox UnCheckedColor="Color.Primary"
                      Order="7"
                      xs="12" sm="12" md="12" lg="12" xl="12" xxl="12"
                      TrueText="Evet" FalseText="Hayir"
                      TModel="USERS" BindingField="@(nameof(USERS.U_IS_CHECKED))" Label="CheckTest" />

    </GridColumns>

    <GridButtons>
        <GridFabButton
                       Title="Opened in edit mode"
                       PageSize="MaxWidth.ExtraExtraLarge"
                       ViewState="ViewState.Update"
                       Color="Color.Tertiary"
                       StartIcon="@Icons.Filled.Edit"
                       TModel="USERS" />

        <GridFabButton  
                       ViewState="ViewState.Remove"
                       Color="Color.Tertiary"
                       StartIcon="@Icons.Filled.Delete"
                       TModel="USERS" />
    </GridButtons>
    <DetailGrid>
        <MudTabs Class="pt-5" Color="Color.Info" Style="width:100%">
            <MudTabPanel Text="Orders">
                <OrdersGrid  />
            </MudTabPanel>
            <MudTabPanel Text="Transactions">
                <TransactionsGrid />
            </MudTabPanel>
        </MudTabs>
    </DetailGrid>
</MudGridX>

@code{

    public Lazy<ObservableCollection<COUNTRIES>> countries { get; set; }

    public Lazy<ObservableCollection<CITIES>> Cities { get; set; }


    protected override Task OnInitializedAsync()
    {
        DataSource = new ObservableCollection<USERS>();


        countries = new Lazy<ObservableCollection<COUNTRIES>>(() => new ObservableCollection<COUNTRIES>
        {
            new (){ C_CODE = "CY", C_DESC = "Cyprus"},
            new (){ C_CODE = "US", C_DESC = "United States"},

        });


        Cities = new Lazy<ObservableCollection<CITIES>>(() => new ObservableCollection<CITIES>
        {
            new (){ CIT_CODE = "NIC", CIT_DESC = "Nicosia", CIT_COUNTRY_CODE = "CY"},

            new (){ CIT_CODE = "NY", CIT_DESC = "New York", CIT_COUNTRY_CODE = "US"},
        });


        return base.OnInitializedAsync();
    }

    public Task CreateCommand(GridXArgs<USERS> args)
    {
        DataSource.Add(args.NewData);
        return Task.CompletedTask;
    }

    public Task UpdateCommand(GridXArgs<USERS> args)
    {
        DataSource[args.Index] = args.NewData;
        return Task.CompletedTask;
    }

    public Task DeleteCommand(GridXArgs<USERS> args)
    {
        DataSource.RemoveAt(args.Index);
        return Task.CompletedTask;
    }

    public async Task CustomCommand()
    {
        //await ShowDialogAsync<MudXPage<DummyModel>>(MaxWidth.Small);

        await ShowDialogAsync<MudXPage<DummyModel>>(MaxWidth.Small,("ViewModel", new DummyModel()));

    }



    public async Task OnLoad(MudXPage<USERS> page)
    {
        var countryCombo = page.GetComponent<GridSelect<USERS, COUNTRIES>>(nameof(USERS.U_COUNTRY_CODE));
        var cityCombo = page.GetComponent<GridSelect<USERS, CITIES>>(nameof(USERS.U_CITY_CODE));

        cityCombo.WhereStatement = X => X.CIT_COUNTRY_CODE == page.ViewModel.U_COUNTRY_CODE;

        countryCombo.ValueChanged = EventCallback.Factory.Create<COUNTRIES>(this, (COUNTRIES arg) => CountryChanged(page,arg));


    }

    public void CountryChanged(MudXPage<USERS> page,COUNTRIES country)
    {
        //OriginalCountryDataSource = new ObservableCollection<COUNTRIES>();

        var cityCombo = page.GetComponent<GridSelect<USERS, CITIES>>(nameof(USERS.U_CITY_CODE));

        cityCombo.WhereStatement = X => X.CIT_COUNTRY_CODE == country.C_CODE;

        page.ViewModel.U_COUNTRY_CODE = country.C_CODE;

        //cityCombo.DataSource = Cities.Value.Where(x=> x.CIT_COUNTRY_CODE.Equals(country.C_CODE));

        page.StateHasChanged();

    }
}