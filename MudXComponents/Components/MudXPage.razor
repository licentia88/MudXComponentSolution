@typeparam TModel where TModel : new()

@inherits UIMudBase<TModel>



@{ if (ViewModel is null) return;}


<EditForm Model="@ViewModel" OnValidSubmit="async ()=> await SubmitClick()">
    <MudDialog DefaultFocus="DefaultFocus.Element">
        <DialogContent>
            <DataAnnotationsValidator />
            <ValidationSummary />
            <MudContainer Style="max-height: 80vh; overflow-y: auto ">
                @{

                    <MudGrid Justify="Justify.FlexStart" Spacing="0">
                        @foreach (var component in Components.Where(x => x is not IButton))
                        {
                            <MudItem xs="component.xs"
                                     sm="component.sm"
                                     md="component.md"
                                     lg="component.lg"
                                     xl="component.xl"
                                     xxl="component.xxl">
                                @*Rendering is done Here*@
                                @component.RenderComponent(ViewModel, ComponentTypes.Form)
                            </MudItem>
                        }
                    </MudGrid>


                    <CascadingValue Value="ViewModel"
                                    Name="@(nameof(MudGridX<TModel>.ParentContext))">
                        @DetailGrid
                    </CascadingValue>
                }
            </MudContainer>


        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton Color="Color.Success" Variant="Variant.Filled" ButtonType="MudBlazor.ButtonType.Submit">@SubmitText</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>


