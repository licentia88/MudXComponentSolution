@typeparam TModel where TModel : new()
@inherits UIMudBase<TModel>

<CascadingValue Value="this" Name="ParentComponent">

    @{
        if (GridColumns is not null && isFirstRender)
        {
            @GridColumns

            isFirstRender = false;
        }
    }


    <MudCard Elevation="4" Style="width:100%!important">
        <MudCardHeader>
            <CardHeaderContent>

                <MudGrid>

                    <MudText Style="margin:1rem!important" Align="Align.Start" Typo="Typo.h6">@Title</MudText>
                    <MudSpacer />
                    @{
                        if (EnableSearch)
                        {
                            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>

                        }
                    }

                </MudGrid>

            </CardHeaderContent>

        </MudCardHeader>

         <MudGrid Class="p-4"   Justify="Justify.FlexEnd">

            @{
                if (HeaderButtons is not null)
                {
                    @HeaderButtons
                }
            }


        </MudGrid>

 

         <MudTable
                   Height="@Height"
                   FixedFooter="@FixedFooter"
                   FixedHeader="@FixedHeader"
                   Elevation="0"
                   Items="@DataSource"
                   Dense="true"
                   Hover="true"
                   Breakpoint="Breakpoint.None"
                   Filter="new Func<TModel,bool>(SearchFilter)">

             @*<ToolBarContent>



             </ToolBarContent>*@

             <HeaderContent>

                    
                 @{
                     if (DetailGrid is not null && !SmartCrud)
                     {
                        <MudTh></MudTh>
                     }

                     foreach (var item in GetComponentOf<ColumnBase<TModel>>())
                     {
                         <MudTh>
                             @item.Label
                         </MudTh>
                     }

                 }

             </HeaderContent>
             <RowTemplate>
               
                 @{
                     if (DetailGrid is not null && !SmartCrud)
                     {

                         
                         var mudIcon = Icons.Material.Filled.AddCircle;

                         if(ShouldDisplay(context))
                         {
                             mudIcon = Icons.Material.Filled.ArrowDropDownCircle;
                         }

                         <MudTd DataLabel="">
                             <MudIcon
                                     Icon="@mudIcon"
                                     Size="Size.Small"
                                     @onclick="@(()=> {
                                                     ShowDetailAsync(context);
                                                 })"/>
                         </MudTd>
                     }
                 }


                 @{

                     foreach (var item in GetComponentOf<ColumnBase<TModel>>())
                     {
                         <MudTd @onclick:stopPropagation="true">
                             @item.RenderComponent(context, ComponentTypes.Grid)
                         </MudTd>
                     }
                 }


                 <MudTd DataLabel="" Style="text-align: right" @onclick:stopPropagation="true">
                     @{
                         if (GridButtons is not null)
                         {
                             <CascadingValue Value="context" Name="Context">
                                 @GridButtons(context)
                             </CascadingValue>

                         }
                     }

                 </MudTd>

             </RowTemplate>

             
             <ChildRowContent>
                 @{

                     if (ShouldDisplay(context) && !SmartCrud)
                     {
                        <tr style="display:table-row!important;overflow:hidden">
                            <td style="display:table-cell!important;overflow:hidden" colspan="12">
                                <CascadingValue Value="context" Name="@(nameof(MudGridX<TModel>.ParentContext))">
                                    @DetailGrid(context)
                                </CascadingValue>
                            </td>
                        </tr>
                     }


                 }
             </ChildRowContent>

             <PagerContent>
                 @{
                     if (EnablePagination)
                     {
                         <MudTablePager />
                     }
                 }
             </PagerContent>



         </MudTable>

    </MudCard>


</CascadingValue>


